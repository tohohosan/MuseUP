<div class="p-6 max-w-lg mx-auto bg-white rounded-xl shadow-md space-y-4 relative">
    <div class="flex items-center justify-between border-b-2 mb-6">
        <div class="text-2xl font-semibold">
            <%= @museum.name %>
        </div>
        <div>
            <%= link_to "https://x.com/intent/post?url=#{ERB::Util.url_encode(museum_url(@museum))}&text=#{ERB::Util.url_encode("#{@museum.name}がオススメ！")}&hashtags=#{ERB::Util.url_encode('MuseUP,みゅーじあっぷ')}",
                target: '_blank',
                data: { toggle: "tooltip", placement: "bottom" },
                title: "Xでシェア",
                role: "button",
                aria: { label: "Xでシェア" } do %>
                <img
                src="<%= asset_path('logo-black.png') %>"
                alt="X でシェアする"
                class="w-5 h-5"
                loading="lazy" />
            <% end %>
        </div>
    </div>

    <div class="carousel w-full mb-4">
        <% if @museum.images.present? %>
            <% @museum.images.each_with_index do |image, index| %>
                <% if image.file.present? %>
                    <div id="item<%= index + 1 %>" class="carousel-item w-full flex justify-center">
                        <%= image_tag image.file.url, class: 'max-w-full max-h-[30rem] object-contain mx-auto rounded shadow-lg' %>
                    </div>
                <% else %>
                    <div class="carousel-item w-full flex justify-center">
                        <p class="text-center text-red-500">画像のURLが取得できません</p>
                    </div>
                <% end %>
            <% end %>
        <% else %>
            <p class="text-center text-red-500">画像が登録されていません</p>
        <% end %>
    </div>
    <div class="flex w-full justify-center gap-2 py-2">
        <% @museum.images.each_with_index do |_, index| %>
            <a href="#item<%= index + 1 %>" class="btn btn-xs"><%= index + 1 %></a>
        <% end %>
    </div>

    <!-- タブ部分 -->
    <div class="tabs-container">
        <div role="tablist" class="tabs tabs-bordered w-full">
            <!-- 詳細情報タブ -->
            <input type="radio" name="my_tabs_2" id="tab1" class="hidden" <%= 'checked' if @active_tab == 1 %>>
            <label for="tab1" class="tab flex-1 items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
                </svg>
                <span class="hidden md:inline-block">詳細情報</span>
            </label>

            <!-- レビュータブ -->
            <input type="radio" name="my_tabs_2" id="tab2" class="hidden">
            <label for="tab2" class="tab flex-1 items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z" />
                </svg>
                <span class="hidden md:inline-block">レビュー</span>
            </label>

            <!-- リストタブ -->
            <input type="radio" name="my_tabs_2" id="tab3" class="hidden">
            <label for="tab3" class="tab flex-1 items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z" />
                </svg>
                <span class="hidden md:inline-block">リスト</span>
            </label>

            <!-- メモタブ -->
            <input type="radio" name="my_tabs_2" id="tab4" class="hidden">
            <label for="tab4" class="tab flex-1 items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                </svg>
                <span class="hidden md:inline-block">メモ</span>
            </label>
        </div>

        <!-- タブコンテンツ部分 -->
        <div class="tab-content-container">
            <div role="tabpanel" class="tab-content p-6" data-content="1">
                <%= render 'museums/description' %>
            </div>

            <div role="tabpanel" class="tab-content p-6" data-content="2">
                <div id="reviews-container">
                    <%= render 'reviews/review', reviews: @reviews %>
                </div>
                <div id="reviews-pagination" class="pagination">
                    <%= paginate @reviews,
                        param_name: :reviews_page,
                        remote: true,
                        params: { tab: params[:tab] || 2, reviews_page: (@reviews.current_page == 1 ? 1 : params[:reviews_page]) }.compact,
                        only_path: true %>
                </div>
            </div>

            <div role="tabpanel" class="tab-content p-6" data-content="3">
                <% if user_signed_in? %>
                    <div id="lists-container">
                        <%= render partial: "lists/list", collection: @lists, as: :list %>
                    </div>
                    <div id="lists-pagination" class="pagination">
                        <%= paginate @lists,
                            param_name: :lists_page,
                            remote: true,
                            params: { tab: params[:tab] || 3, lists_page: (@lists.current_page == 1 ? 1 : params[:lists_page]) }.compact,
                            only_path: true %>
                    </div>
                <% else %>
                    <p class="text-red-500 mt-4">リスト機能を使うにはログインが必要です。</p>
                <% end %>
            </div>

            <div role="tabpanel" class="tab-content p-6" data-content="4">
                <% if user_signed_in? %>
                    <%= render 'notes/note' %>
                <% else %>
                    <p class="text-red-500 mt-4">メモを作成するにはログインが必要です。</p>
                <% end %>
            </div>
        </div>
    </div>
</div>

<style>
    .tabs {
        display: flex;
        overflow-x: auto;
        white-space: nowrap; /* タブ名の折り返しを防止 */
        scrollbar-width: thin;
    }

    /* アクティブなタブラベルのスタイル */
    input[type="radio"]:checked + label {
        font-weight: bold;
        border-bottom: 2px solid #000; /* 選択中のタブを強調 */
    }

    @media (min-width: 531px) {
        .tabs label span {
            display: inline-block;
        }
    }

    @media (max-width: 530px) {
        .tabs label span {
            display: none;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const tabs = document.querySelectorAll('.tabs input[type="radio"]');
        const contents = document.querySelectorAll('.tab-content');

        // URLからクエリパラメータを取得
        const urlParams = new URLSearchParams(window.location.search);
        const tabParam = urlParams.get('tab') || '1'; // デフォルトで1を選択

        // 初期タブ状態の設定
        function activateTab(tabIndex) {
            tabs.forEach((tab, index) => {
            const content = contents[index];
            if (index + 1 == tabIndex) {
                tab.checked = true;
                content.style.display = 'block';
            } else {
                tab.checked = false;
                content.style.display = 'none';
            }
        });
    }

    // 初期表示
    activateTab(tabParam);

    // タブクリック時の処理
    tabs.forEach((tab, index) => {
        tab.addEventListener('change', () => {
            const tabIndex = index + 1;

            // タブの表示切り替え
            activateTab(tabIndex);

            // URL の更新
            const url = new URL(window.location.href);
            url.searchParams.set('tab', tabIndex);
            window.history.replaceState(null, '', url.toString());
        });
    });

    // ページネーションリンクのクリック処理
    function updatePageLinks(container, paramName) {
        if (!container) return;

        container.addEventListener('click', (event) => {
            const link = event.target.closest('a');
                if (link) {
                    event.preventDefault();
                    const url = new URL(link.href);

                    // ページ番号の更新
                    const page = url.searchParams.get(paramName);
                    const currentUrl = new URL(window.location.href);
                    currentUrl.searchParams.set(paramName, page);

                    // ページ番号を URL に反映
                    window.history.pushState(null, '', currentUrl.toString());

                    // ページネーションの内容を非同期で更新
                    fetch(link.href, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                        .then(response => response.text())
                        .then(html => {
                            const newContent = new DOMParser().parseFromString(html, 'text/html');
                            const updatedContainer = newContent.querySelector(`#${container.id}`);
                            container.innerHTML = updatedContainer.innerHTML;

                            // イベントリスナーを再登録
                            updatePageLinks(container, paramName);
                        })
                        .catch(error => console.error('エラー:', error));
                }
            });
        }

        // 各ページネーションに処理を適用
        const reviewsPagination = document.querySelector('#reviews-pagination');
        const listsPagination = document.querySelector('#lists-pagination');
        updatePageLinks(reviewsPagination, 'reviews_page');
        updatePageLinks(listsPagination, 'lists_page');

        // 履歴変更時のタブとページ更新対応
        window.addEventListener('popstate', () => {
            const newUrlParams = new URLSearchParams(window.location.search);
            const newTabParam = newUrlParams.get('tab') || '1';
            activateTab(newTabParam);
        });
    });
</script>

